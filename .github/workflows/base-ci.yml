name: C++ CI Template

on:
  workflow_call:
    inputs:
      folder:
        required: true
        type: string
      name:
        required: true
        type: string

jobs:
  formatting-check:
    name: Formatting check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/apt-packages-list.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dos2unix
        run: sudo apt-get install -y dos2unix

      - name: Check line breaks
        run: ./${{ inputs.folder }}/ci-extra/check-lines.sh

      - name: Run clang-format style check
        uses: jidicula/clang-format-action@v4.13.0
        with:
          clang-format-version: '18'
          check-path: '${{ inputs.folder }}'

  test:
    needs: formatting-check
    name: "Test (${{ matrix.compiler.cc }}, ${{ matrix.build_type }})"
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        compiler:
          - cc: gcc
            cxx: g++
          - cc: clang
            cxx: clang++
        build_type: [Debug, Release, RelWithDebInfo, Sanitized]

    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add PPA for gcc-13
        if: ${{ matrix.compiler.cc == 'gcc' }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y

      - name: Install dependencies
        run: |
          sudo apt update
          xargs -a .github/workflows/apt-packages-list.txt sudo apt-get install -y
          git clone https://github.com/microsoft/vcpkg.gitAdd
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install catch2

      - name: Install GCC 13 and set as default
        if: ${{ matrix.compiler.cc == 'gcc' }}
        run: |
          sudo apt update
          sudo apt install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
          sudo update-alternatives --set gcc /usr/bin/gcc-13
          sudo update-alternatives --set g++ /usr/bin/g++-13

      - name: Install Clang-17 and set as default
        if: ${{ matrix.compiler.cc == 'clang' }}
        run: |
          sudo apt update
          sudo apt install -y wget gnupg lsb-release
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 17
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-17 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-17 100
          sudo update-alternatives --set clang /usr/bin/clang-17
          sudo update-alternatives --set clang++ /usr/bin/clang++-17

      - name: Set environment variables
        run: |
          echo "CMAKE_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(pwd)/vcpkg/installed" >> $GITHUB_ENV

      - name: Build
        run: |
          cd ${{ inputs.folder }}
          CXXFLAGS="${{ matrix.build_type == 'RelWithDebInfo' && '-gdwarf-2' || '' }}" \
          ci-extra/build.sh ${{ matrix.build_type }}

      - name: Run tests
        run: |
          cd ${{ inputs.folder }}
          ci-extra/test.sh ${{ matrix.build_type }}

      - name: Run tests with valgrind
        if: ${{ matrix.build_type == 'RelWithDebInfo' }}
        run: |
          cd ${{ inputs.folder }}
          ci-extra/test-valgrind.sh ${{ matrix.build_type }}
